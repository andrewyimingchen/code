from sklearn.model_selection import cross_val_score, KFold

# Cross-validation function
def cross_validate_model(model, X, y, model_name):
    kfold = KFold(n_splits=5, shuffle=True, random_state=42)
    
    # Cross-validation for RMSE (negative mean squared error)
    neg_mse = cross_val_score(model, X, y, scoring='neg_mean_squared_error', cv=kfold, n_jobs=-1)
    rmse_scores = (-neg_mse) ** 0.5  # Convert negative MSE to RMSE
    
    # Cross-validation for R-squared
    r2_scores = cross_val_score(model, X, y, scoring='r2', cv=kfold, n_jobs=-1)
    
    print(f'{model_name} - Cross-validated RMSE: {rmse_scores.mean():.4f} ± {rmse_scores.std():.4f}')
    print(f'{model_name} - Cross-validated R-squared: {r2_scores.mean():.4f} ± {r2_scores.std():.4f}')
    
    # Store the mean and standard deviation of the scores
    model_results[model_name] = {
        'CV_RMSE_Mean': rmse_scores.mean(),
        'CV_RMSE_Std': rmse_scores.std(),
        'CV_R2_Mean': r2_scores.mean(),
        'CV_R2_Std': r2_scores.std()
    }

# Dictionary to store cross-validated results
model_results = {}

# Perform cross-validation for each tuned model
for model_name, model in best_models_random.items():
    cross_validate_model(model, X, y, model_name)

# Convert results to a DataFrame for visualization
results_cv_df = pd.DataFrame(model_results).T

# Plotting cross-validated RMSE
plt.figure(figsize=(10, 6))
results_cv_df['CV_RMSE_Mean'].plot(kind='barh', xerr=results_cv_df['CV_RMSE_Std'], color='lightblue')
plt.title('Model Comparison: Cross-validated RMSE')
plt.xlabel('Cross-validated RMSE (Mean ± Std)')
plt.ylabel('Model')
plt.gca().invert_yaxis()  # Highest performance at the top
plt.show()

# Plotting cross-validated R-squared
plt.figure(figsize=(10, 6))
results_cv_df['CV_R2_Mean'].plot(kind='barh', xerr=results_cv_df['CV_R2_Std'], color='lightgreen')
plt.title('Model Comparison: Cross-validated R-squared')
plt.xlabel('Cross-validated R-squared (Mean ± Std)')
plt.ylabel('Model')
plt.gca().invert_yaxis()  # Highest performance at the top
plt.show()
